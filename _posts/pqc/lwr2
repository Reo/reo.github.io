---
layout: post
title: 'Post-Quantum Cryptography: Learning with Rounding'
category: Crypto
author: 'reo'
tags: LWR Lattice
featured: 1
mathjax: true
---

The next step in our goal of understanding the NIST candidates for post-quantum cryptography will
be to look at Learning with Rounding (LWR). As you can probably guess, this is related to Learning with
Errors but it has a few key differences which makes it generally more efficient than LWE.

## Contents
{:.no_toc}

* Content
{:toc}

<br>

***

## The Idea

***

In LWE, we sampled an error vector from a Gaussian distribution to fuzz the solution to a set of linear equations.
There is a way to blur this information without needing to sample an error, and this is the
so-called "rounding".

More precisely: in LWR, we generate the analog to errors deterministically by rounding an element in $$\mathbb{Z}_q$$ to
one in a more spare set such as $$\mathbb{Z}_p$$ where $$p < q$$.
<!---->
We can then formalize our rounding procedure by defining
$$\left\lfloor x\right \rceil_p = \left\lfloor \frac{p}{q}x\right \rceil \pmod{p}$$
where $$\left\lfloor x\right \rceil$$ denotes the nearest integer to $$x$$.

We can simplify this further by choosing $$q$$ and $$p$$ to be powers of $$2$$, say,

$$q = 2^{\epsilon_q},\quad p = 2^{\epsilon_p}$$

where $$\epsilon_q, \epsilon_p$$ are positive integers such that $$\epsilon_q > \epsilon_p$$.
This simplifies our rounding operation since now $$p/q = 2^{\epsilon_p - \epsilon_q}$$ which is equivalent to shifting
$$\epsilon_q - \epsilon_p$$ bits to the right; the mod $$p$$ is implicit in this operation.

The moduli are also easier to implement since taking mod $$q$$ is equivalent to saying keep the $$q$$ least significant bits
(and similarly for mod $$p$$).

<br>

***

## Key Exchange

***

1. Alice generates $$A\in\mathbb{Z}_q^{l\times l}$$ Uniform and $$s\in\mathbb{Z}_q^{l\times 1}$$ Gaussian,
2. computes sends $$b=(As \bmod q) \gg (\epsilon_q - \epsilon_p)\in \mathbb{Z}_p^{l\times 1}$$

***

1. Bob generates $$s'\in\mathbb{Z}_q^{l\times 1}$$ Gaussian
2. computes $$b' = (A^T s' \bmod q) \gg (\epsilon_q - \epsilon_p)\in \mathbb{Z}_p^{l\times 1}$$
3. computes $$v' = b^T(s'\bmod p)\in \mathbb{Z}_p$$
4. computes $$c  = ((v'\bmod p) \gg (\epsilon_p - \epsilon_t - 1)\bmod t)\in \mathbb{Z}_t$$
5. computes $$k' = msb(v')$$
6. sends $$b', c$$ to Alice

***

3. Alice computes $$v = b'^T(s\bmod p)\in \mathbb{Z}_p$$
4. computes $$k = msb(v - 2^{\epsilon_p - \epsilon_t - 1}c)$$

$$v = b'^T(s\bmod p) = ((A^T s' \bmod q) \gg (\epsilon_q - \epsilon_p))^T(s\bmod p) \approx s'^TAs$$

$$v' = b^T(s'\bmod p) = ((As \bmod q) \gg (\epsilon_q - \epsilon_p))^T(s'\bmod p) \approx s^TA^Ts' = s'^TAs$$

to see why the last equality holds we recall that the transpose of a $$1\times 1$$ matrix is itself
so $$s^TA^Ts' = (s^TA^Ts')^T = s'^TAs$$. Since the shared secret will be the most significant bit
of $$v$$ and $$v'$$ and we have that $$v\approx v'$$ we have that with high probability, Alice and Bob
agree on a secret.

<br>

***

## Example

***

As for concrete numbers, we can use $$\epsilon_q = 13, \epsilon_p = 10, \epsilon_t = 3$$ (so there is a corresponding $$t=2^{\epsilon_t}$$)
Choose $$l=3$$

For high correctness, we choose a moderatiely small variance for our gaussian: $$\sigma = 2^6$$ but higher security purposes may want to choose
higher variance for more security. (the distribution is also truncated at $$\pm \sigma/2$$)

the numbers here were generated in python using `randint(0,q-1)` from the `random` package for uniform distributions and
a rounded `truncnorm((lower - mu) / sigma, (upper - mu) / sigma, loc=mu, scale=sigma)` from `scipy.stats` package
for the Gaussian distribution.

$$
A=
\begin{bmatrix}
4768 &
7514 &
2031 \\
331 &
6544 &
2947 \\
7512 &
4568 &
4028
\end{bmatrix}
,\qquad
\pmb{s} = 
\begin{bmatrix}
22\\
-17\\
10
\end{bmatrix}
$$

we get

$$
As\bmod q =
\begin{bmatrix}
5660\\
7424\\
5008
\end{bmatrix}
$$

bit shifting right by $$\epsilon_q - \epsilon_p = 3$$ we get

$$
b=
\begin{bmatrix}
707\\
928\\
626
\end{bmatrix}
$$

Now it's Bob's turn:

$$
\pmb{s}' = 
\begin{bmatrix}
-9\\
16\\
-27
\end{bmatrix}
$$

notice in our case $$s = s\bmod p$$ and also $$s' = s'\bmod p$$. This is convenient for computation.

$$
A^Ts'\bmod q =
\begin{bmatrix}
5320\\
3854\\
2037
\end{bmatrix}
$$

bit shifting right by $$\epsilon_q - \epsilon_p = 3$$ and $$\epsilon_p - \epsilon_t = 7$$
respectively we get

$$
b'=
\begin{bmatrix}
665\\
481\\
254
\end{bmatrix}
,\quad
v' = -8417 \bmod p = 799
,\quad
c = 4
,\quad
k' = msb(799) = 1
$$

Finally, Alice completes the process using $$r = 2^{\epsilon_p - \epsilon_t - 1}c = 64 * 4 = 256$$

$$
v = 8993\bmod p = 801
k = msb(v - r) = msb(801 - 256) = msb(545) = 1
$$

as expected

<br>

***

## Asymmetric Encryption

***

Encrypting $$m$$ is done similarly with the only difference being instead of computing $$c$$,
you compute $$c_m=(v' + 2^{\epsilon_p-1}m\bmod p)\gg (\epsilon_p - \epsilon_t - 1)\in\mathbb{Z}_{2t}$$.

To decrypt, Alice would compute $$msb(m')$$ where $$m' = (v - 2^{\epsilon_p - \epsilon_t - 1}c_m)$$.

<br>

***
### Example
***

Using the same values from our earlier example and $$m = 1$$ we have

$$c_m = (799 + 2^9\bmod p)\gg (10 - 3 - 1) = 287 \gg 6  = 4$$

$$msb(m') = msb(801 - 2^{6}4) = msb(545) = 1$$

if instead $$m=0$$ then $$c_m = 12$$ and $$msb(m') = msb(801 - 2^6\cdot12) = msb(801-768) = msb(33) = 0$$ as expected

<br>

***

## Conclusion

***

Though similar to 


<br>

* * *
### Additional Resources:
* * *


